Bradley Pirie 
CSE384
HW5 Exercise 3-2
25MAR2021

_________________________________________________________________________________


#include <stdio.h>
#include <string.h>

/* Write a function escape(s,t) that converts characters like newline and tab into
   visible escape sequences like \n and \t as it copies the string t to s. Use a switch. Write a
   function for the other direction as well, converting escape sequences into the real characters.
*/

void escape(char s[], char t[]) {	// Forwards direction
   int i, j;
   for (i = j = 0; t[i] != '\0'; i++) {	// Iterate through t[]
      switch (t[i]) {	// Check if the char at i is one of the following escape sequences
         case '\b':	// Case for backspace escape sequence
	    s[j] = '\\';	// Fill in s[] with \ char
            j += 1;		// Increment j
            s[j] = 'b';		// Fill in s[] with the corresponding char
            j += 1;		// Increment j again
            break;
	 case '\n':		// Case for newline, same as above
            s[j] = '\\';
            j += 1;
            s[j] = 'n';
            j += 1;
            break;
         case '\r':		// Case for carriage return, ------
	    s[j] = '\\';
            j += 1;
            s[j] = 'r';
            j += 1;
            break;
	 case '\t':		// Case for tab, ------
            s[j] = '\\';
            j += 1;
            s[j] = 't';
            j += 1;
            break;
	 case '\v':		// Case for vertical tab, ------
	    s[j] = '\\';
            j += 1;
            s[j] = 'v';
            j += 1;
            break;
         default:		// If we reach default case then the char isnt an escape sequence
            s[j] = t[i];	// Copy char in t[] to s[]
            j +=1;		// Increment j
            break;
      }
   }
   s[j] = '\0';			// Once we leave the for loop through t[] end s[] with null char
}



void escape_reverse(char s[], char t[]) {	// Reverse direction
   int i, j;
   for (i = j = 0; t[i] != '\0'; i++) {		// Iterate through
      if (t[i] == '\\') {	// Check if next char is a backslash
         i += 1;		// If it is then increment i and check next char
         switch (t[i]) {
            case 'b':		// Case for a b following \
               s[j] = '\b';	// Copy corresponding backspace char to s[]
               j += 1;		// Increment j
               break;
            case 'n':		// Case for an n, match corresponding sequence
               s[j] = '\n';
               j += 1;
               break;
            case 'r':		// Case for an r, same as above
               s[j] = '\r';
               j += 1;
               break;
            case 't':		// Case for a t, ------
               s[j] = '\t';
               j += 1;
               break;
            case 'v':		// Case for a v, ------
               s[j] = '\v';
               j += 1;
               break;
         }
      }
      else {		// If the char is not a backslash then copy the char
         s[j] = t[i];	// Copy t[] char to s[]
         j += 1;	// Increment j
      }
   }
   s[j] = '\0';		// Once we've iterated through t[] end s[] with the null char
}